// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  userName String   @unique
  email    String   @unique
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviews  Review[]
  comments Comment[]
  likes    Like[]
}

model Movie {
  id          Int      @id @default(autoincrement())
  title       String @unique
  description String
  releaseYear DateTime
  category       String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  reviews Review[]
}

model Review {
  id       Int      @id @default(autoincrement())
  content  String
  rating   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User     @relation(fields: [userId], references: [id])
  userId Int

  movie  Movie    @relation(fields: [movieId], references: [id])
  movieId Int

  comments Comment[]
  likes    Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  text   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User     @relation(fields: [userId], references: [id])
  userId Int

  review  Review   @relation(fields: [reviewId], references: [id])
  reviewId Int
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User     @relation(fields: [userId], references: [id]) 
  userId Int

  review  Review   @relation(fields: [reviewId], references: [id])  
  reviewId Int

  @@unique([userId, reviewId])
}